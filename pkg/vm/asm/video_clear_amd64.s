// Code generated by command: go run video_clear.go -out video_clear_amd64.s -stubs video_clear_amd64.go. DO NOT EDIT.

#include "textflag.h"

// func VideoClearAsm(array *byte, red uint8, green uint8, blue uint8)
// Requires: AVX, SSE2
TEXT Â·VideoClearAsm(SB), NOSPLIT, $0-11
	// Load params
	MOVQ array+0(FP), AX
	MOVB red+8(FP), CL
	MOVB green+9(FP), DL
	MOVB blue+10(FP), BL
	MOVQ AX, SI
	ADDQ $0x00038400, SI

	// Generate colour
	MOVL $0x00000000, DI
	MOVB BL, DI
	SHLL $0x08, DI
	ORB  DL, DI
	SHLL $0x08, DI
	ORB  CL, DI

	// Shuffle XMM
	MOVD    DI, X0
	VPSHUFB first_mask<>+0(SB), X0, X0
	VPSHUFB second_mask<>+0(SB), X0, X1
	VPSHUFB third_mask<>+0(SB), X0, X2

	// Fill colour
loop:
	MOVNTDQ X0, (AX)
	MOVNTDQ X1, 16(AX)
	MOVNTDQ X2, 32(AX)
	MOVNTDQ X0, 48(AX)
	MOVNTDQ X1, 64(AX)
	MOVNTDQ X2, 80(AX)
	MOVNTDQ X0, 96(AX)
	MOVNTDQ X1, 112(AX)
	MOVNTDQ X2, 128(AX)
	MOVNTDQ X0, 144(AX)
	MOVNTDQ X1, 160(AX)
	MOVNTDQ X2, 176(AX)
	ADDQ    $0xc0, AX
	CMPQ    AX, SI
	JBE     loop
	RET

DATA first_mask<>+0(SB)/16, $"\x00\x01\x02\x00\x01\x02\x00\x01\x02\x00\x01\x02\x00\x01\x02\x00"
GLOBL first_mask<>(SB), RODATA|NOPTR, $16

DATA second_mask<>+0(SB)/16, $"\x01\x02\x00\x01\x02\x00\x01\x02\x00\x01\x02\x00\x01\x02\x00\x01"
GLOBL second_mask<>(SB), RODATA|NOPTR, $16

DATA third_mask<>+0(SB)/16, $"\x02\x00\x01\x02\x00\x01\x02\x00\x01\x02\x00\x01\x02\x00\x01\x02"
GLOBL third_mask<>(SB), RODATA|NOPTR, $16
