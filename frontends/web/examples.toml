examples = [
    { name="Shapes", description="Draws several shapes to the screen", path="area_test", program_text="""
//Draws a rectangle and other shapes to the screen
#def pos 64
#def size 2

#def line_end_x 320
#def line_end_y 240

#def white 0xFFFFFFFF

//          
#def poly 0x03_4000_8040_0040

#label start

lda @white
mov d0 vc

lda @pos
mov d0 r00
lda @size
mov d0 r01

mul r00 r01
mov a0 vx1
mov a0 vy1

mov r00 vx0
mov r00 vy0
int va

add r00 r00
mov a0 vx0
mov a0 vy0

lda @poly
int vp

lda @line_end_x
mov d0 vx1

lda @line_end_y
mov d0 vy1

clr vx0
clr vy0

int vl

int vf
"""},
    { name="Hello World", description="Basic hello world example", path="hello_world", program_text="""
// Simple hello world example

#def hw "Hello World"
#def white 0xFFFFFFFF

#label start

lda @hw
mov d0 vt

lda @white
mov d0 vc

int vt
int vf
"""},
    { name="IO Inputs", description="IO Inputs test", path="io_inputs",  program_text="""

// Turning IO outputs on/off with switches.

#label handle_io

mov io08 io00
mov io09 io01
mov io10 io02
mov io11 io03
mov io12 io04
mov io13 io05
mov io14 io06
mov io15 io07

int iof

iret

#intsub io08 handle_io
#intsub io09 handle_io
#intsub io10 handle_io
#intsub io11 handle_io
#intsub io12 handle_io
#intsub io13 handle_io
#intsub io14 handle_io
#intsub io15 handle_io

#label hang_loop
jmp @hang_loop

#label start

jmp @hang_loop
 
"""},
    { name="Paint", description="Simple paint program", path="line_paint", program_text="""
//Paint but uses lines
//r00 = mx previous
//r01 = my previous

#def white 0xFFFFFFFF
#def black 0x000000FF

#label handle_mouse_move

mov mx vx1
mov my vy1

mov r00 vx0
mov r01 vy0

int vl
int vf

mov mx r00
mov my r01

iret

#label clear_bg

lda @white
mov d0 vc
int vc
int vf

lda @black
mov d0 vc

iret

#intsub mm handle_mouse_move
#intsub kd clear_bg

#label loop
jmp @loop

#label start

lda @white
mov d0 vc
int vc
int vf

lda @black
mov d0 vc

jmp @loop

"""},
    { name="Sound", description="Increasing sound frequency", path="sound", program_text="""
//Outputs a sine wave and increases frequency over time.
#def x 10
#def t 50
#def vol 16

#label loop

add r00 r02
mov a0 r00
mov r00 st
int sf
hlt r01
jmp @loop

#label start

lda @x
mov d0 r00
mov d0 r02

lda @t
mov d0 r01

lda @vol
mov d0 sv

jmp @loop
"""},
{ name="System Module", description="Grabs the name of the frontend from the system module", path="sys_module", program_text="""
// Interacts with the system module

#def white 0xFFFFFFFF
#def name_string "Name: "

#label start

lda @white
mov d0 vc

clr d0

emi r00
mov d0 vt

lda @name_string
sr vt dl
mov d0 vt

int vt
int vf
"""},
{name="Paint keyboard", description="Like paint but uses keyboard presses for drawing", path="paint_keyboard_press", program_text="""
//Paint that uses clicks

#def bg 0xffffffff
#def line 0x000000ff

// Main hang loop

#label loop
jmp @loop

// Cleanup

#label end_draw

clr a0
clr io00
int iof
int vf

ret

// Two main draw calls

#label draw_line
int vl
ret

#label draw_square
int va
ret

// Decide wether to draw square or line

#label finish_draw

mov mx vx1
mov my vy1

clr a0

eq io08 r00
cndcall @draw_square

neq io08 r00
cndcall @draw_line

call @end_draw

iret

#label start_draw

mov mx vx0
mov my vy0

clr a0
incr io00
int iof

iret

// Handle initial keyboard press

#label onpress

neq io00 r00
cndjmp @start_draw

eq io00 r00
cndjmp @finish_draw

iret

// Entrypoint

#label start

lda @bg
mov d0 vc
int vc
int vf

#intsub kd onpress

lda @line
mov d0 vc

incr r00

jmp @loop
"""},
{name="Fibonacci", description="Iteraritve Fibonacci", path="fib", program_text="""
// Iterative fib
// Result is stored in r02
// Target is 46 because this results in the largest value that can be stored
// in a 32 bit register.

#def aim 46
#def two 2

#label start

lda @two
mov d0 r00

lda @aim
mov d0 r15
lt r15 r00
cndjmp @end

// Loop

incr r03

clr r00
incr r01

#label main_loop

add r00 r01
mov a0 r00

mov r00 r02
mov r01 r00
mov r02 r01

sub r15 r03
mov a0 r15

gt r15 r04
cndjmp @main_loop

#label end
"""}
]